name: Deploy Doppler

env:
  IMAGE_NAME: wano-africa-be
  CONTAINER_NAME: wano-africa-be
  REMOTE_DIR: /wano-africa-be

on:
  workflow_dispatch:
  push:
    branches:
      - dev  

jobs:
  build-and-deploy:
    runs-on: [self-hosted, server]
    env:
      DOPPLER_PROJECT: wano-app
      DOPPLER_CONFIG: dev
      DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_DEV }}
      DOCKER_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Doppler CLI via GitHub Action
        uses: dopplerhq/cli-action@v3

      - name: Fetch secrets from Doppler
        run: doppler secrets download --no-file --format env > .env.stage.dev

      - name: Copy .env to Remote Directory
        run: cp .env.stage.dev ./.env

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Build Docker Image with Tag
        run: |
          export DOCKER_BUILDKIT=1
          docker compose build

      - name: Deploy and verify new container
        run: |
          set -e
          docker compose up -d --wait --wait-timeout 120 --force-recreate

      - name: Remove Exited Old Containers (Safe)
        run: |
          # Only remove stopped/exited containers with the same name, NOT running ones
          docker ps -a -f "name=${{ env.CONTAINER_NAME }}" -f "status=exited" -q | xargs --no-run-if-empty docker rm -f

      - name: Remove Old Docker Images (Cleanup)
        run: |
          LATEST_IMAGE_ID=$(docker images --filter="reference=${{ env.IMAGE_NAME }}:*" --format "{{.ID}}" | head -n 1)
          docker images --filter="reference=${{ env.IMAGE_NAME }}:*" --format "{{.ID}}" | grep -v "$LATEST_IMAGE_ID" | xargs --no-run-if-empty docker rmi -f || true

      - name: Remove dangling images & build cache
        run: |
          docker image prune -f
          docker builder prune -f
          docker system prune -a --volumes -f

      - name: Slack Notification (rich)
        uses: act10ns/slack@v2
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          config: .github/config/slack.yml
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
